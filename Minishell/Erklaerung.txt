zulaessige Funktionen:

readline: Eine Funktion zum Lesen einer Zeile von der Standardeingabe.
rl_clear_history: Löscht die Historie von readline.
rl_on_new_line: Signalisiert readline, dass eine neue Zeile begonnen hat.
rl_replace_line: Ersetzt die aktuelle Zeile in readline.
rl_redisplay: Aktualisiert die Anzeige von readline.
add_history: Fügt eine Zeile zur Historie hinzu.
printf: Eine Funktion zum Formatieren und Ausgeben von Zeichenketten auf dem Bildschirm.
malloc: Reserviert Speicherplatz auf dem Heap zur Laufzeit.
free: Gibt den Speicherplatz frei, der mit malloc allokiert wurde.
write: Schreibt Daten in eine Datei oder ein Dateideskriptor.
access: Überprüft die Zugriffsrechte einer Datei.
open: Öffnet eine Datei für Lese- oder Schreibzugriff.
read: Liest Daten aus einer Datei oder einem Dateideskriptor.
close: Schließt einen Dateideskriptor.
fork: Erstellt einen neuen Prozess (Kindprozess) durch Kopieren des aktuellen Prozesses (Elternprozess).
wait, waitpid, wait3, wait4: Warten auf das Ende eines Kindprozesses.
signal, sigaction, sigemptyset, sigaddset, kill, exit: Funktionen zur Signalbehandlung und Prozessbeendigung.
getcwd, chdir: Zur Arbeit mit dem aktuellen Arbeitsverzeichnis.
stat, lstat, fstat: Informationen über Dateien abrufen.
unlink: Löscht eine Datei vom Dateisystem.
execve: Ersetzt das aktuelle Programm durch ein anderes.
dup, dup2: Dupliziert Dateideskriptoren.
pipe: Erstellt eine Pipe für die Interprozesskommunikation.
opendir, readdir, closedir: Zur Arbeit mit Verzeichnissen.
strerror, perror: Zur Fehlerbehandlung und Fehlerausgabe.
isatty, ttyname, ttyslot, ioctl: Zur Arbeit mit Terminalen.
getenv: Ruft den Wert einer Umgebungsvariable ab.
tcsetattr, tcgetattr: Zur Konfiguration von Terminalattributen.
tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs: Zur Terminalemulation und Steuerung der Terminalausgabe.

was ist ein Prompt:
Ein "Prompt" ist eine Benutzeroberfläche, 
die in einer Shell verwendet wird, 
um dem Benutzer anzuzeigen, 
dass er einen Befehl eingeben kann. 
Es ist im Grunde genommen ein Anzeigetext, 
der dem Benutzer signalisiert, 
dass die Eingabe erwartet wird. 
In der Regel wird der Prompt durch ein spezielles Zeichen oder eine Zeichenfolge dargestellt,
gefolgt von einem Leerzeichen, um dem Benutzer anzuzeigen, dass er einen Befehl eingeben kann.
$ ist ein gängiger Prompt.
> ist ein weiterer gängiger Prompt.

was sind tokens:
In der Informatik bezieht sich ein Token auf eine Gruppe von Zeichen,
die als eine Einheit behandelt werden.
Sie teilen die Benutzereingabe in einzelne Wörter oder Tokens auf,
um sie später analysieren und interpretieren zu können.
#emir = analysieren, mahdi = interpretieren.

was ist ein parser?
Ein Parser ist ein Programm oder eine Funktion,
die eine benutzerdefinierte Sprache analysiert und interpretiert,
wenn dies notwendig ist, um die Benutzereingabe zu verarbeiten.

was ist eine execution?
Die Ausführung bezieht sich auf den Prozess,
bei dem ein Programm (oder Code) ausgeführt wird,
also seine Funktionalität ausführt.
Das Gegenteil davon ist Kompilierung,
bei der der Code in Maschinencode übersetzt wird,
der direkt von der CPU ausgeführt werden kann.

was ist ein shell-builtin command?
Shell-Builtins sind spezielle Befehle oder Funktionen,
die Teil eines Interpreters oder Shells sind,
anstatt separate Programme oder Skripte zu sein.
Sie bieten oft eine schnellere und effizientere Möglichkeit,
bestimmte Aufgaben auszuführn, da sie nicht separat geladen werden müssen.

was ist ein signal?
Ein Signal ist ein Mechanismus,
der in Unix-ähnlichen Betriebssystemen verwendet wird,
um einen Prozess darüber zu informieren,
dass etwas passiert ist, das es beachten sollte.
Signale können dazu dienen, einen Prozess zu beenden,
oder ihn anzuweisen, etwas anderes zu tun,
wie zum Beispiel das Anzeigen einer Fehlermeldung.